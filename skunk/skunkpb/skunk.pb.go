// Code generated by protoc-gen-go. DO NOT EDIT.
// source: skunk.proto

package skunkpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_skunk_3b329ef22aed1e2c, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "skunkpb.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SkunkClient is the client API for Skunk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkunkClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type skunkClient struct {
	cc *grpc.ClientConn
}

func NewSkunkClient(cc *grpc.ClientConn) SkunkClient {
	return &skunkClient{cc}
}

func (c *skunkClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skunkpb.Skunk/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkunkServer is the server API for Skunk service.
type SkunkServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterSkunkServer(s *grpc.Server, srv SkunkServer) {
	s.RegisterService(&_Skunk_serviceDesc, srv)
}

func _Skunk_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkunkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skunkpb.Skunk/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkunkServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Skunk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skunkpb.Skunk",
	HandlerType: (*SkunkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Skunk_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skunk.proto",
}

func init() { proto.RegisterFile("skunk.proto", fileDescriptor_skunk_3b329ef22aed1e2c) }

var fileDescriptor_skunk_3b329ef22aed1e2c = []byte{
	// 85 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0x2e, 0xcd,
	0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0x73, 0x0a, 0x92, 0x94, 0xd8, 0xb9,
	0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x8d, 0x0c, 0xb9, 0x58, 0x83, 0x41, 0x62, 0x42, 0x1a, 0x5c,
	0x2c, 0x01, 0x99, 0x79, 0xe9, 0x42, 0x7c, 0x7a, 0x50, 0x35, 0x7a, 0x60, 0x05, 0x52, 0x68, 0x7c,
	0x25, 0x86, 0x24, 0x36, 0xb0, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x52, 0x4d,
	0xd3, 0x5a, 0x00, 0x00, 0x00,
}
