// Code generated by protoc-gen-go. DO NOT EDIT.
// source: skunk.proto

package skunkpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_skunk_008be66e3c6b0ff7, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GetDataReq struct {
	RoundId              int64    `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Player               string   `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDataReq) Reset()         { *m = GetDataReq{} }
func (m *GetDataReq) String() string { return proto.CompactTextString(m) }
func (*GetDataReq) ProtoMessage()    {}
func (*GetDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_skunk_008be66e3c6b0ff7, []int{1}
}
func (m *GetDataReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDataReq.Unmarshal(m, b)
}
func (m *GetDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDataReq.Marshal(b, m, deterministic)
}
func (dst *GetDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataReq.Merge(dst, src)
}
func (m *GetDataReq) XXX_Size() int {
	return xxx_messageInfo_GetDataReq.Size(m)
}
func (m *GetDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataReq proto.InternalMessageInfo

func (m *GetDataReq) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *GetDataReq) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

type GetDataRes struct {
	Part                 []*Part  `protobuf:"bytes,1,rep,name=part,proto3" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDataRes) Reset()         { *m = GetDataRes{} }
func (m *GetDataRes) String() string { return proto.CompactTextString(m) }
func (*GetDataRes) ProtoMessage()    {}
func (*GetDataRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_skunk_008be66e3c6b0ff7, []int{2}
}
func (m *GetDataRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDataRes.Unmarshal(m, b)
}
func (m *GetDataRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDataRes.Marshal(b, m, deterministic)
}
func (dst *GetDataRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataRes.Merge(dst, src)
}
func (m *GetDataRes) XXX_Size() int {
	return xxx_messageInfo_GetDataRes.Size(m)
}
func (m *GetDataRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataRes proto.InternalMessageInfo

func (m *GetDataRes) GetPart() []*Part {
	if m != nil {
		return m.Part
	}
	return nil
}

type Part struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoundId              int64    `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Player               string   `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Part                 int64    `protobuf:"varint,4,opt,name=part,proto3" json:"part,omitempty"`
	Rank                 int64    `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Part) Reset()         { *m = Part{} }
func (m *Part) String() string { return proto.CompactTextString(m) }
func (*Part) ProtoMessage()    {}
func (*Part) Descriptor() ([]byte, []int) {
	return fileDescriptor_skunk_008be66e3c6b0ff7, []int{3}
}
func (m *Part) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Part.Unmarshal(m, b)
}
func (m *Part) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Part.Marshal(b, m, deterministic)
}
func (dst *Part) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Part.Merge(dst, src)
}
func (m *Part) XXX_Size() int {
	return xxx_messageInfo_Part.Size(m)
}
func (m *Part) XXX_DiscardUnknown() {
	xxx_messageInfo_Part.DiscardUnknown(m)
}

var xxx_messageInfo_Part proto.InternalMessageInfo

func (m *Part) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Part) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *Part) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *Part) GetPart() int64 {
	if m != nil {
		return m.Part
	}
	return 0
}

func (m *Part) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "skunkpb.Empty")
	proto.RegisterType((*GetDataReq)(nil), "skunkpb.GetDataReq")
	proto.RegisterType((*GetDataRes)(nil), "skunkpb.GetDataRes")
	proto.RegisterType((*Part)(nil), "skunkpb.Part")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SkunkClient is the client API for Skunk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkunkClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataRes, error)
	Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Skunk_StreamClient, error)
}

type skunkClient struct {
	cc *grpc.ClientConn
}

func NewSkunkClient(cc *grpc.ClientConn) SkunkClient {
	return &skunkClient{cc}
}

func (c *skunkClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/skunkpb.Skunk/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skunkClient) GetData(ctx context.Context, in *GetDataReq, opts ...grpc.CallOption) (*GetDataRes, error) {
	out := new(GetDataRes)
	err := c.cc.Invoke(ctx, "/skunkpb.Skunk/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skunkClient) Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Skunk_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Skunk_serviceDesc.Streams[0], "/skunkpb.Skunk/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &skunkStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Skunk_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type skunkStreamClient struct {
	grpc.ClientStream
}

func (x *skunkStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SkunkServer is the server API for Skunk service.
type SkunkServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	GetData(context.Context, *GetDataReq) (*GetDataRes, error)
	Stream(*reflexpb.StreamRequest, Skunk_StreamServer) error
}

func RegisterSkunkServer(s *grpc.Server, srv SkunkServer) {
	s.RegisterService(&_Skunk_serviceDesc, srv)
}

func _Skunk_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkunkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skunkpb.Skunk/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkunkServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skunk_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkunkServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skunkpb.Skunk/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkunkServer).GetData(ctx, req.(*GetDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skunk_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SkunkServer).Stream(m, &skunkStreamServer{stream})
}

type Skunk_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type skunkStreamServer struct {
	grpc.ServerStream
}

func (x *skunkStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Skunk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skunkpb.Skunk",
	HandlerType: (*SkunkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Skunk_Ping_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _Skunk_GetData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Skunk_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "skunk.proto",
}

func init() { proto.RegisterFile("skunk.proto", fileDescriptor_skunk_008be66e3c6b0ff7) }

var fileDescriptor_skunk_008be66e3c6b0ff7 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x41, 0x4e, 0xeb, 0x30,
	0x14, 0xac, 0xd3, 0xb4, 0xf9, 0xff, 0x55, 0x14, 0xe9, 0x21, 0x41, 0xc8, 0xaa, 0x78, 0x95, 0x05,
	0x72, 0x51, 0x11, 0x6c, 0xd9, 0x50, 0x21, 0x76, 0x55, 0x7a, 0x00, 0xe4, 0x10, 0x53, 0xa2, 0xb6,
	0x8e, 0xe3, 0x38, 0x88, 0xde, 0x86, 0xa3, 0xa2, 0x38, 0x26, 0x2d, 0x08, 0x56, 0x7e, 0x33, 0x63,
	0x7b, 0xc6, 0x63, 0x18, 0x55, 0xeb, 0x5a, 0xae, 0x99, 0xd2, 0x85, 0x29, 0x30, 0xb0, 0x40, 0xa5,
	0xd1, 0xe5, 0x2a, 0x37, 0xaf, 0x75, 0xca, 0x9e, 0x8b, 0xed, 0x74, 0x53, 0xcb, 0x62, 0xaa, 0xc5,
	0xcb, 0x46, 0xbc, 0xbb, 0x45, 0xa5, 0x6e, 0x68, 0x8f, 0xd1, 0x00, 0x06, 0xf3, 0xad, 0x32, 0x3b,
	0x7a, 0x07, 0xf0, 0x20, 0xcc, 0x3d, 0x37, 0x3c, 0x11, 0x25, 0x9e, 0xc3, 0x3f, 0x5d, 0xd4, 0x32,
	0x7b, 0xca, 0xb3, 0x90, 0x4c, 0x48, 0xdc, 0x4f, 0x02, 0x8b, 0x1f, 0x33, 0x3c, 0x85, 0xa1, 0xda,
	0xf0, 0x9d, 0xd0, 0xa1, 0x37, 0x21, 0xf1, 0xff, 0xc4, 0x21, 0x3a, 0x3d, 0xb8, 0xa0, 0xc2, 0x0b,
	0xf0, 0x15, 0xd7, 0x26, 0x24, 0x93, 0x7e, 0x3c, 0x9a, 0x1d, 0x31, 0x97, 0x8e, 0x2d, 0xb8, 0x36,
	0x89, 0x95, 0x68, 0x09, 0x7e, 0x83, 0x70, 0x0c, 0x5e, 0xe7, 0xe2, 0xe5, 0xd9, 0x37, 0x6f, 0xef,
	0x2f, 0xef, 0xfe, 0xa1, 0x37, 0xa2, 0x73, 0xf3, 0xed, 0x76, 0x3b, 0x37, 0x9c, 0xe6, 0x72, 0x1d,
	0x0e, 0x5a, 0xae, 0x99, 0x67, 0x1f, 0x04, 0x06, 0xcb, 0x26, 0x09, 0xc6, 0xe0, 0x2f, 0x72, 0xb9,
	0xc2, 0x71, 0x97, 0xcc, 0xd6, 0x10, 0xfd, 0xc0, 0xb4, 0x87, 0x37, 0x10, 0xb8, 0x77, 0xe1, 0x49,
	0x27, 0xee, 0xab, 0x8a, 0x7e, 0x21, 0x2b, 0xda, 0xc3, 0x5b, 0x18, 0x2e, 0x8d, 0x16, 0x7c, 0x8b,
	0x67, 0xec, 0xab, 0x7a, 0xd6, 0x32, 0x89, 0x28, 0x6b, 0x51, 0x99, 0xe8, 0x78, 0x2f, 0xcc, 0xdf,
	0x84, 0x34, 0xb4, 0x77, 0x45, 0xd2, 0xa1, 0xfd, 0x97, 0xeb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x39, 0x0c, 0xfb, 0x9b, 0xdd, 0x01, 0x00, 0x00,
}
